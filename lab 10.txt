zad 1 

Function.prototype.defer = function(ms) {
  setTimeout(this, ms);
};

function f() {
  alert("Hello!");
}

f.defer(1000); 


zad 2


Function.prototype.defer = function(ms) {
  let func = this;
  return function(...args) {
    setTimeout(() => func.apply(this, args), ms);
  };
};

function f(a, b) {
  alert(a + b);
}

f.defer(1000)(1, 2); 



zad 3 


let dictionary = Object.create(null);

dictionary.apple = "Apple";
dictionary.__proto__ = "test"; 

Object.defineProperty(dictionary, 'toString', {
  value: function() {
    return Object.keys(this).join(',');
  },
  enumerable: false
});

for (let key in dictionary) {
  alert(key);
}

alert(dictionary.toString()); 