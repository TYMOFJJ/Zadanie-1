(zad 4)


class Lambdasian {
  constructor({ name, age, location }) {
    this.name = name;
    this.age = age;
    this.location = location;
  }

  speak() {
    return `Hello my name is ${this.name}, I am from ${this.location}`;
  }
}


(zad 5)

class Instructor extends Lambdasian {
  constructor({ name, age, location, specialty, favLanguage, catchPhrase }) {
    super({ name, age, location });
    this.specialty = specialty;
    this.favLanguage = favLanguage;
    this.catchPhrase = catchPhrase;
  }

  demo(subject) {
    return `Today we are learning about ${subject}`;
  }

  grade(student, subject) {
    return `${student.name} receives the highest grade in ${subject}`;
  }
}


(zad 6)

class Student extends Lambdasian {
  constructor({ name, age, location, previousBackground, className, favSubjects }) {
    super({ name, age, location });
    this.previousBackground = previousBackground;
    this.className = className;
    this.favSubjects = favSubjects;
  }

  listSubjects() {
    return `Loving ${this.favSubjects.join(', ')}!`;
  }

  PRAssignment(subject) {
    return `${this.name} has submitted a PR for ${subject}`;
  }

  sprintChallenge(subject) {
    return `${this.name} has begun sprint challenge on ${subject}`;
  }
}


(zad 7)

class ProjectManager extends Instructor {
  constructor({ name, age, location, specialty, favLanguage, catchPhrase, gradClassName, favInstructor }) {
    super({ name, age, location, specialty, favLanguage, catchPhrase });
    this.gradClassName = gradClassName;
    this.favInstructor = favInstructor;
  }

  standUp(channel) {
    return `${this.name} announces on ${channel}, @channel standy time!`;
  }

  debugsCode(student, subject) {
    return `${this.name} debugs ${student.name}'s code on ${subject}`;
  }
}